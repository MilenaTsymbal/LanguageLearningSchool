@using LanguageLearningSchool.Enums;
@using LanguageLearningSchool.ViewModels;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole> RoleManager
@model CourseDetailsViewModel
@{
var currentUser = await UserManager.GetUserAsync(User);
var LanguageColour = new Dictionary<Languages, string>
    {
    {Languages.English, "#FED6BC"},
    {Languages.Spanish, "#FFFADD"},
    {Languages.French, "#DEF7FE"},
    {Languages.German, "#E7ECFF"},
    {Languages.Chinese, "#C3FBD8"},
    {Languages.Japanese, "#FDEED9"},
    {Languages.Italian, "#F6FFF8"},
    {Languages.Portuguese, "#B5F2EA"},
    {Languages.Korean, "#C6D8FF"},
    };

    var currentColour = LanguageColour[Model.Course.Language];
}
<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
    .courseDetail {
        width: 100%;
        align-items: stretch;
    }

    .courseBackgroundColour {
        width: 100%;
        height: 150px;
    }

    .courseInfo {
        display: flex;
        width: 100%;
    }

    .courseFullInfo {
        width: 70%;
        padding-left: 10px;
        padding-top: 10px;
    }

    .courseExtraInfo {
        width: 30%;
    }

    .courseButtons {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin-bottom: 10px;
    }

    .courseButtons a {
        margin-top: 10px;
        width: 140px;
    }

    .courseUsers {
        padding-left: 10px;
        padding-top: 10px;
    }

    .user {
        display: flex;
        justify-content: space-between;
        align-items: center;
        height: 30px;
        width: 100%;
    }
</style>
</head>

<body>
<div class="container">
    <div class="courseDetail">
        <div class="courseBackgroundColour"
            style="display: flex; justify-content: center; align-items: center; background-color: @currentColour;">
            <h5>@Model.Course.CourseName</h5>
        </div>
        <div class="courseInfo">
            <div class="courseFullInfo border">
                <p>Description:<br>@Model.Course.Description<br></p>
                <p>Language:<br>@Model.Course.Language<br></p>
                <p>Difficulty:<br>@Model.Course.DifficultyLevel<br></p>
            </div>
            <div class="courseExtraInfo border">

                @if (currentUser == null)
                {
                    <p><a asp-controller="Account" asp-action="Login"
                        class="link-danger link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover"
                        style="margin-top: 10px;">You need to log in</a></p>
                }

                @if (await UserManager.IsInRoleAsync(currentUser, Roles.Student.ToString()))
                {
                    bool isUserRegistered = Model.UsersAndCourse.Any(uc => uc.CourseId ==
                        Model.Course.CourseId && uc.StartDate != null);
                    if (!isUserRegistered)
                    {
                        <div class="courseButtons">
                            <a type="button" class="btn btn-sm btn-outline-secondary">Register</a>
                        </div>
                    }
                }
                else if (await UserManager.IsInRoleAsync(currentUser, Roles.Teacher.ToString()))
                {
                        <div class="courseButtons">
                            <a asp-controller="Course" asp-action="Edit" asp-route-id="@Model.Course.CourseId"
                                type="button" class="btn btn-sm btn-outline-secondary">Edit course info</a>
                            <a asp-controller="Course" asp-action="Delete" asp-route-id="@Model.Course.CourseId"
                                type="button" class="btn btn-sm btn-outline-secondary"
                                style="background-color: #FE6C6C;">Delete this course</a>
                        </div>
                }
                else if (await UserManager.IsInRoleAsync(currentUser, Roles.Admin.ToString()))
                {
                        <div class="courseButtons">
                            <a type="button" class="btn btn-sm btn-outline-secondary">Register</a>
                            <a asp-controller="Course" asp-action="Edit" asp-route-id="@Model.Course.CourseId"
                                class="btn btn-sm btn-outline-secondary">Edit course info</a>
                            <a asp-controller="Course" asp-action="Delete" asp-route-id="@Model.Course.CourseId"
                                type="button" class="btn btn-sm btn-outline-secondary"
                                style="background-color: #FE6C6C;">Delete this course</a>
                        </div>
                }

                <div class="courseUsers border-top">
                    <p>Teacher:<br>
                        @foreach (var user in Model.UsersAndCourse)
                        {
                            @if (await UserManager.IsInRoleAsync(user.User, "Teacher"))
                            {
                            <a class="text-dark" asp-area="" asp-controller="User" asp-action="Detail"
                                asp-route-id="@user.User.Id">@user.User.Name @user.User.Surname</a>
                            }
                        }
                    </p>
                    <br>
                    <p>Students:
                        @foreach (var user in Model.UsersAndCourse)
                        {
                            @if (await UserManager.IsInRoleAsync(@user.User, "Student")
                                   || await UserManager.IsInRoleAsync(@user.User, "Admin"))
                            {
                                <div class="user">
                                    <a class="text-dark" asp-area="" asp-controller="User" asp-action="Detail"
                                         asp-route-id="@user.User.Id">@user.User.Name @user.User.Surname</a>
                                    @if (await UserManager.IsInRoleAsync(currentUser, Roles.Admin.ToString()) ||
                                        await UserManager.IsInRoleAsync(currentUser, Roles.Teacher.ToString()))
                                    {
                                        <form method="post" asp-controller="Course" asp-action="RemoveUserFromCourse" 
                                            asp-route-courseId="@Model.Course.CourseId" asp-route-userId="@user.User.Id">
                                            <button type="submit" class="btn btn-sm btn-outline-secondary" 
                                            style="background-color: #FE6C6C; width: 70px; height: 25px; margin-right:10px; 
                                            display: flex; align-items: center; justify-content: center;">Remove</button>
                                        </form>
                                    }
                                </div>
                            }
                        }
                    </p>
            
                </div>
            </div>
        </div>
    </div>
</div>

</body>

</html>